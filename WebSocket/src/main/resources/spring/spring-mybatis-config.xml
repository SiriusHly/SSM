<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 这里排除扫描Controller:https:https://blog.csdn.net/Evan_Leung/article/details/50664939-->
    <context:component-scan base-package="com.*">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!-- 引入jdbc配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties"/>
    </bean>

    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <!--初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"/>
        <!--连接池最大数量-->
        <property name="maxActive" value="${maxActive}"/>
        <!--连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"/>
        <!--连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"/>
        <!--获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"/>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <!--对MyBatis和Spring进行集成，把sqlSessionFactory交给Spring管理，通常情况下-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 引入数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描mapping.xml文件 -->
        <!--mapperLocations：它表示我们的Mapper文件存放的位置，当我们的Mapper文件跟对应的Mapper接口处于同一位置的时候可以不用指定该属性的值。-->
        <!--<property name="mapperLocations" value="classpath:com/hly/websocket/mapping/*.xml"/>-->
        <!--别名-->
        <property name="typeAliasesPackage" value="com.hly.ssm.pojo"/>
    </bean>

    <!-- DAO层接口所在包名，Spring会自动查找其下的类,代替手工编写数据访问的代码 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hly.ssm.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--采用实体dao调用方式调用，在dao里面可以用注解@Resource(name="sqlSessionTemplate")方式得到或用ao继承SQLSessionDaoSupport再采用setter方式对dao进行注入-->
    <!--Mybatis-Spring为我们提供了一个实现了SqlSession接口的SqlSessionTemplate类，它是线程安全的，可以被多个Dao同时使用。同时它还跟Spring的事务进行了关联，确保当前被使用的SqlSession是一个已经和Spring的事务进行绑定了的。而且它还可以自己管理Session的提交和关闭。当使用了Spring的事务管理机制后，SqlSession还可以跟着Spring的事务一起提交和回滚。-->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory">
        </constructor-arg>
    </bean>

    <!-- 开启事务,事物管理器 -->
    <!--这是管理事务的。你一个service可能写多条操作sql语句。当第一条成功了。第二条报错了。如果你没有事务。那么第一条sql语句就会生效。有了事务就可以回滚。保证同时成功或失败。最典型的就是银行的取钱。-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 开启@Transactional实现注解事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

</beans>